INC_DIRS += " -Iphp/main -Iphp/TSRM -Iphp/Zend";
CXXFLAGS += INC_DIRS;
CFLAGS += INC_DIRS;
CXXFLAGS += " -Iphp-ext/PHP-CPP -std=c++11";

// embedding.
CFLAGS += " -Iembed2-sapi/src/";
CXXFLAGS += " -Iembed2-sapi/src/";
if OS() == "mac" then {
	// Seriously, PHP...why? xD ( Zend.m4:239 )
	CFLAGS += " -DDARWIN";
	CXXFLAGS += " -DDARWIN";
}
// We need proper php/TSRM/threads.m4 integration. This is flag-wise...complicated.
// Best bet would be to extend the OS() function, combine with matches(), and add test-compile funcs.
if OS() == "linux" then {
	CFLAGS += " -D_REENTRANT";
	CXXFLAGS += " -D_REENTRANT";
}

// We need to somehiw pull the inclusion of inttypes.h and the like inside! otherwise, this library is DEAD.
/*LDFLAGS += " -pthread";
target "php/TSRM/tsrm_config.h" {
	rule "cDetect";
	tag "configure";
	input ["util/tsrm_configure.c"];
	// Settings for the rule.
	CDOUT = OUT+"/tsrm_configure";
	CDFLAGS = "--cache=cache.txt --with-tsrm-zts";
}
target OUT+"/libtsrm.a" {
	SRC = [
		"php/TSRM/TSRM.c",
		"php/TSRM/tsrm_nw.c",
		"php/TSRM/tsrm_strtok_r.c",
		"php/TSRM/tsrm_virtual_cwd.c"
	];
	if OS() == "win" then {
		SRC += ["php/TSRM/tsrm_win32.c"];
	}
	requires [targets("configure")];
	rule "lib";
	tag "tsrm";
	input [SRC];
}*/

// Needs configuring and generating.
/*target OUT+"/libphp5.a" {...}*/

/*target "PHP-CPP/config_util" {
	input [files("php-ext/PHP-CPP/config/*.cpp")];
	rule "exe";
	tag "phpcpp_config";
}

target "PHP-CPP/config.h" {
	requires [targets("phpcpp_config")];
	tag "phpcpp_config_h";
	display "Generating";
	profile "build" {
		execute(
			"./php-ext/PHP-CPP/config_util > '"+OUTPUT+"'", 
			fileName("php-ext/PHP-CPP/config_util")
		);
	}
}

target OUT+"/libphp-cpp.a" {
	CXXFLAGS += " -fpic -Iphp-ext/PHP-CPP/src/";
	requires ["phpcpp_config_h"];
	input [files("PHP-CPP/src/*.cpp")];
	tag "php-ext";
}

// Lets deal with the PHP extensions.
// Yes, this all is gonna be hand-crafted, to be as individual as possible.
target OUT+"/libphp-jsond.a" {
	rule "lib";
	input [files("php-ext/jsond/*.c")];
	tag "php-ext";
	CFLAGS += " -Iphp-ext/jsond";
}
target OUT+"/libphp-v8js.a" {
	rule "lib";
	input [files("php-ext/v8js/*.c"), files("php-ext/v8js/*.cc")];
	tag "php-ext";
	CXXFLAGS += CHROMIUM_INCLUDE+"/v8/include -Iphp-ext/v8js";
	CFLAGS += CHROMIUM_INCLUDE+"/v8/include -Iphp-ext/v8js";
}
target OUT+"/libphp-pthreads.a" {
	rule "lib";
	tag "php-ext";
	CFLAGS += " -Iphp-ext/pthreads/classes -Iphp-ext/pthreads/iterators -Iphp-ext/pthreads/src -Iphp-ext/pthreads";
	input [files("php-ext/pthreads/src/*.c")];
}
target OUT+"/libphp-uv.a" {
	rule "lib";
	tag "php-ext";
	input [files("php-ext/uv/*.c")];
	CFLAGS += " -Iphp-ext/uv";
}
target OUT+"/libphp-embed2-sapi.a" {
	input [files("embed2-sapi/src/*.c")];
}*/
