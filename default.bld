if enable_debug != null then {
	print("-- Debug enabled.");
	BUILD_TYPE="Debug";
} else {
	BUILD_TYPE="Release";
}
// we define that for any case.
OUT = "./out";
// OBJ_DIR = "./obj";
LDFLAGS += LDFLAGS.lib_dir(OUT).lib_dir("libchromiumcontent_"+OS()+"/"+BUILD_TYPE);
CFLAGS += " -fPIC -fno-common -Wno-pointer-sign -g -Wno-deprecated-declarations";
CXXFLAGS += " -fPIC -fno-common -Wno-pointer-sign -g -Wno-deprecated-declarations";
CHROMIUM_INCLUDE = " -Ilibchromiumcontent_"+OS()+"/src";

// FLTK fix
CXXFLAGS += " -Wno-c++11-narrowing";

if !exists(OUT) then { /*mkdir(OUT);*/ execute("mkdir "+OUT); }
// if !exists(OBJ_DIR) then { /*mkdir(OUT);*/ execute("mkdir "+OBJ_DIR); }

// Configuration utils! YEEEEEEEEY!!!
include "./.IceTea/cDetect.bld";

// NodeJS dependencies
include "./.IceTea/libuv.bld";
include "./.IceTea/libhttp-parser.bld";
include "./.IceTea/libc-ares.bld";

// PHP dependencies
include "./.IceTea/sqlite3+Trololo.bld";
include "./.IceTea/re2c.bld";
include "./.IceTea/php.bld"; # Not completed yet!

// Engine specific stuff
include "./.IceTea/ttvfs.bld"; // FS abstraction + reading off ram capability
include "./.IceTea/utils.bld"; // Random stuff
include "./.IceTea/libcanister.bld"; // Minimal archiving library in FS block architecture. Very fast.
include "./.IceTea/libucl.bld"; // JSON/YAML hybrid config parser
include "./.IceTea/fltk.bld"; // GUI toolkit to abstract underlying OS' GUI engine (GTK, X11, Cocoa, Win32)
include "./.IceTea/angelscript.bld"; // Default script interface for default setup.

// Need PHP first...which depends on checks and generator.
//include "./.IceTea/curl.bld";

// Need proper path handling...
// include "./libbu/default.bld";
// include "./build/default.bld";
// include "./.IceTea/libbu.bld";

// About to come...
/*
	standart build files will be improved.
	PHP extensions:
		php-uv
		php-v8js
		php-pthreads
	Own extensions:
		php-phoenix-ipc
		php-phoenix-gui
	nodejs.bld
	nodejs native extensions:
		node-tagg
		node-ph7 (cause we can)
		node-phoenix-gui
		node-phoenix-ipc
		nodejs-async
*/

// Very super-duper special... :)
if OS() == "mac" then {
	target OUT+"/libPhoenixEngine.dylib" {
		requires [
			# nodejs
			targets("http-parser"),
			targets("c-ares"),
			targets("libuv"),
			# extras
			targets("ttvfs"),
			targets("libcanister"),
			targets("libucl"),
			targets("sqlite3"),
			targets("libtrololo"),
			#FLTK
			targets("configure"),
			targets("libfltk"),
			targets("libfltk_gl"),
			targets("libfltk_forms"),
			targets("libfltk_image"),
			targets("libfltk_png"),
			targets("libangelscript")
		];
		tag "phoenix_engine";
		LDFLAGS += " -all_load";
		rule "dylib";
		input [files(OUT+"/*.a")];
	}
	target OUT+"/PhoenixEngine.framework" {
		display "Framework";
		requires [targets("phoenix_engine")];
		tag "PEFramework";
		profile "build" {
			for dir in [OUTPUT, OUTPUT+"/Resources", OUTPUT+"/Libraries"] do {
				execute("mkdir -p '"+dir+"'");
			}
			execute("cp '"+OUT+"/libPhoenixEngine.dylib' '"+OUTPUT+"/Phoenix Engine'");
		}
		profile "clean" {
			condition always;
			execute("rm -rf '"+OUTPUT+"'","rm");
		}
	}
}

// These includes are only possible, because they require the engine.
include "./.IceTea/fltk_stuff.bld";

action "all" { build: [targets("configure"), targets()]; }
action "default" { build: [targets("phoenix_engine")]; }
action "test" { build: [targets("test")]; }
action "tools" { build: [targets("re2c")]; }

// OS X stuff
action "clean-framework" {
	if OS() == "mac" then {
		clean: [targets("PEFramework")];
	}
}
action "framework" {
	if OS() == "mac" then {
		build: [targets("PEFramework")];
	}
}

action "rebuild" {
	clean: [targets("phoenix_engine")];
	build: [targets("phoenix_engine")];
}

// for-loop does not work with actions, as actions arent expecting an expression, but rather a string literal.
// Need to update build.y ...
action "fltk" {	build: [ targets().matches("*fltk*") ]; }
action "clean-fltk" { clean: [ targets().matches("*fltk*") ]; }
